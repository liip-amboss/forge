include: ".gitlab-tasks.yml"

variables:
  STAGING_BRANCH: "feature/docker-buildkit"
  PROD_BRANCH: "master"
  SKIP_DEPLOY: "False"
  DOCKER_IMAGE: docker:20.10.14
  DEPLOY_IMAGE: alpine:latest
  DIND_SERVICE_IMAGE: docker:20.10.14-dind

default:
  image: python:3.8

stages:
  - test-build
  - deploy
  - release

# STAGE: test
flake8:
  stage: test-build
  extends:
    - .pip-requirements
  script:
    - flake8
  variables:
    REQUIREMENTS_FILE: "requirements/test.txt"

Pytest:
  stage: test-build
  extends:
    - .pip-requirements
  variables:
    POSTGRES_PASSWORD: unsafe
    REQUIREMENTS_FILE: "requirements/test.txt"
    MIN_COVERAGE_BACKEND: 70
  services:
    - postgres:latest
  script:
    - pytest --cov-fail-under=$MIN_COVERAGE_BACKEND -c pytest-ci.ini
    - pwd
    - ls -la
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/backend/coverage.xml
    reports:
      junit: $CI_PROJECT_DIR/backend/report.xml
      cobertura:
        - $CI_PROJECT_DIR/backend/coverage.xml

Test Frontend:
  stage: test-build
  image: node:14
  variables:
    MIN_COVERAGE_FRONTEND: 15
  before_script:
    - cd frontend && npm ci --cache .npm --prefer-offline
  script:
    - npm run test -- --coverageThreshold='{"global":{"statements":"$MIN_COVERAGE_FRONTEND"}}'
  tags:
    - docker
  except:
    - tags
  cache:
    key:
      files:
        - frontend/package-lock.json
    paths:
      - frontend/.npm/
  artifacts:
    when: always
    reports:
      junit:
        - $CI_PROJECT_DIR/frontend/junit.xml
      cobertura: $CI_PROJECT_DIR/frontend/coverage/cobertura-coverage.xml

# STAGE: build-staging
# Containerize Vue frontend and push to gitlab container registry
Build Frontend:
  stage: test-build
  extends:
    - .docker-build
  except:
    - tags
  variables:
    IMAGE_SUFFIX: $CI_COMMIT_SHORT_SHA
    APP: frontend
    DOCKERFILE: Dockerfile.frontend
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: ($CI_COMMIT_BRANCH == $STAGING_BRANCH || $CI_COMMIT_BRANCH == $PROD_BRANCH || $CI_COMMIT_TAG)
      when: never

# Containerize Vue frontend styleguide and push to gitlab container registry
Build Frontend Styleguide:
  stage: test-build
  extends:
    - .docker-build
  except:
    - tags
  variables:
    APP: frontend
    DOCKERFILE: Dockerfile.styleguide
    IMAGE_TAG: ${CI_REGISTRY}/${CI_PROJECT_PATH}:styleguide_${CI_COMMIT_SHORT_SHA}
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: ($CI_COMMIT_BRANCH == $STAGING_BRANCH || $CI_COMMIT_BRANCH == $PROD_BRANCH || $CI_COMMIT_TAG)
      when: never

# Containerize VuePress docs app and push to gitlab container registry
Build Forge Docs:
  stage: test-build
  extends:
    - .docker-build
  except:
    - tags
  variables:
    IMAGE_SUFFIX: $CI_COMMIT_SHORT_SHA
    APP: docs
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: ($CI_COMMIT_BRANCH == $STAGING_BRANCH || $CI_COMMIT_BRANCH == $PROD_BRANCH || $CI_COMMIT_TAG)
      when: never

# STAGE: build-staging
# Containerize Django backend and push to gitlab container registry
Build Backend:
  stage: test-build
  extends:
    - .docker-build
  except:
    - tags
  variables:
    IMAGE_SUFFIX: $CI_COMMIT_SHORT_SHA
    APP: backend
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: ($CI_COMMIT_BRANCH == $STAGING_BRANCH || $CI_COMMIT_BRANCH == $PROD_BRANCH || $CI_COMMIT_TAG)
      when: never

# STAGE: deploy-staging
# Deploy merge request to k8s cluster.
Deploy Review App:
  stage: deploy
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: https://$CI_ENVIRONMENT_SLUG.k8s.liip.ch
  extends:
    - .k8s-deploy
  needs:
    - job: Build Backend
    - job: Build Frontend
    - job: Build Frontend Styleguide
    - job: Build Forge Docs
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: ($CI_COMMIT_BRANCH == $STAGING_BRANCH || $CI_COMMIT_BRANCH == $PROD_BRANCH || $CI_COMMIT_TAG)
      when: never
  variables:
    IMAGE_SUFFIX: $CI_COMMIT_SHORT_SHA
    ENVIRONMENT_NAMESPACE: forge
    FRONTEND_DOMAIN: https://$CI_ENVIRONMENT_SLUG.k8s.liip.ch
    BACKEND_DOMAIN: https://$CI_ENVIRONMENT_SLUG.k8s.liip.ch

# STAGE: deploy-staging
# Deployment on staging server
Deploy Staging:
  stage: deploy
  extends:
    - .docker-deploy
  rules:
    - if: $CI_COMMIT_BRANCH == $STAGING_BRANCH
  needs:
    - job: Build Backend
    - job: Build Frontend
    - job: Build Frontend Styleguide
    - job: Build Forge Docs
  variables:
    IMAGE_SUFFIX: staging
    DOMAIN: ${STAGING_DOMAIN}
    DEPLOYMENT_SSH_KEY: ${STAGING_SSH_PRIVATE_KEY}
    SSH_PORT: 22

# STAGE: release
# Create new gitlab release
Create Gitlab Release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: ($CI_COMMIT_BRANCH == $STAGING_BRANCH || $CI_COMMIT_BRANCH == $PROD_BRANCH)
  needs:
    - job: Deploy Staging
      optional: true
  script:
    - echo "running release-job for $CI_COMMIT_SHORT_SHA"
  release:
    name: 'Release $CI_COMMIT_SHORT_SHA'
    description: 'Created using the release-cli'
    tag_name: '$CI_COMMIT_SHORT_SHA'
    ref: '$CI_COMMIT_SHA'
  tags:
    - docker-privileged

# Create new sentry release and send sourcemaps
Update Sentry:
  stage: release
  image: getsentry/sentry-cli
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: ($CI_COMMIT_BRANCH == $STAGING_BRANCH || $CI_COMMIT_BRANCH == $PROD_BRANCH) && $SENTRY_AUTH_TOKEN
  needs:
    - job: Deploy Staging
      optional: true
    - job: Generate Release Tag
      artifacts: true
      optional: true
    - job: Build Frontend
      artifacts: true
      optional: true
  script:
    - export SENTRY_AUTH_TOKEN=$SENTRY_AUTH_TOKEN
    - export SENTRY_ORG=$SENTRY_ORG
    - export SENTRY_PROJECT=$SENTRY_PROJECT
    - echo "Creating new sentry release with tag $RELEASE_TAG..."
    - sentry-cli releases new $RELEASE_TAG
    - echo "Uploading sourcemaps files to Sentry..."
    - ls ${CI_PROJECT_DIR}/sourcemaps
    - sentry-cli releases files $RELEASE_TAG upload-sourcemaps ${CI_PROJECT_DIR}/sourcemaps
    - echo "Finalizing sentry release and setting commits..."
    - sentry-cli releases finalize $RELEASE_TAG
    - sentry-cli releases set-commits --auto $RELEASE_TAG
    - echo "Finalized release, set commits and uploaded sourcemaps for release $RELEASE_TAG"
  tags:
    - docker