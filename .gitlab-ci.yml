default:
  image: python:3.8

stages:
  - test
  - build-staging
  - deploy-staging

# this is for testing the backend
test-and-lint-backend:
  stage: test
  variables:
    POSTGRES_PASSWORD: unsafe
  services:
    - postgres:latest
  script:
    - cd backend
    - pip install -r requirements/test.txt
    - flake8
    - pytest -c pytest-ci.ini
  tags:
    - docker

# this is for testing the frontend
test-frontend:
  stage: test
  image: node:13.6.0-alpine3.11
  script:
    - cd frontend
    - "! grep -ir 'console.log' src/"
    - npm install
    - npm run test
  tags:
    - docker

build-staging:
  stage: build-staging
  image: docker:19.03.8
  only:
      - develop
  variables:
    DOCKER_DRIVER: overlay2
  services:
    - docker:18.09-dind
  before_script:
    - docker info
  script:
    - docker build --build-arg build_env=build-staging -t ${CI_REGISTRY}/${CI_PROJECT_PATH}:backend_staging backend/
    - docker build --build-arg build_env=build-staging -t ${CI_REGISTRY}/${CI_PROJECT_PATH}:docs_staging docs/
    - docker build --build-arg build_env=build-staging -t ${CI_REGISTRY}/${CI_PROJECT_PATH}:frontend_staging frontend/
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN ${CI_REGISTRY}
    - docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}:backend_staging
    - docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}:docs_staging
    - docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}:frontend_staging
  tags:
    - docker-privileged

deploy-staging:
  stage: deploy-staging
  environment:
    name: staging
  script:
    - scp -r ./deploy/ ${STAGING_USER}@${STAGING_DOMAIN}:/srv/app/
    - ssh ${STAGING_USER}@$STAGING_DOMAIN "cd /srv/app/deploy/scripts/; ./deploy.sh ${CI_DEPLOY_USER} ${CI_DEPLOY_PASSWORD} ${CI_REGISTRY} ${CI_PROJECT_PATH} staging"
  tags:
    - shell
  only:
  - develop
