# Copy deploy folder to given target server and run scripts.sh on target server.
.docker-deploy: &docker-deploy
  image: $DEPLOY_IMAGE
  variables:
    DEPLOY_COMMAND: "cd /home/manager/srv/app/scripts/; chmod u+x deploy.sh; ./deploy.sh ${CI_DEPLOY_USER} ${CI_DEPLOY_PASSWORD} ${CI_REGISTRY} ${CI_PROJECT_PATH} ${IMAGE_NAME}"
  environment:
    name: ${IMAGE_SUFFIX}
    url: https://$DOMAIN
  before_script:
    - apk add --no-cache rsync
    - 'which ssh-agent || ( apk add --no-cache openssh-client )'
    - eval $(ssh-agent -s)
    - echo "$DEPLOYMENT_SSH_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    - ssh -p $SSH_PORT manager@${DOMAIN} "mkdir -p ~/srv/app/"
    - rsync -r -e "ssh -p ${SSH_PORT}" ./deploy/ manager@${DOMAIN}:~/srv/app/
    - if [ "$SKIP_DEPLOY" = "True" ]; then exit 0; fi
    - ssh -p $SSH_PORT manager@$DOMAIN $DEPLOY_COMMAND
  tags:
    - docker-privileged

# Pull forge helm chart and deploy to a k8s cluster.
.k8s-deploy: &k8s-deploy
  image:
    name: alpine/helm
    entrypoint: [""]
  tags:
    - docker-privileged
  script:
    - git clone --depth 1 --branch v1.1.1  https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.liip.ch/amboss/ambops/forge-helm-chart.git
    - helm dependency update forge-helm-chart/charts/backend
    - >
      helm upgrade --install --namespace "${K8S_NAMESPACE}" 
      --set "backend.imageName=backend:${IMAGE_SUFFIX}"
      --set "frontend.imageName=frontend:${IMAGE_SUFFIX}"
      --set "global.image.repository=${CI_REGISTRY}/${CI_PROJECT_PATH}/" 
      --set "global.imagePullSecretName=container-registry-read"
      --set "global.frontendHostName=$FRONTEND_URL" 
      --set "global.backendHostName=$BACKEND_URL" 
      --set "backend.postgresql.fullnameOverride=postgres-django-${CI_ENVIRONMENT_SLUG}" 
      --set "backend.djangoEnv.DATABASE_URL=postgres://postgres:postgres@postgres-django-${CI_ENVIRONMENT_SLUG}/postgres"
      --set "backend.djangoEnv.DJANGO_SUPERUSER_PASSWORD=$REVIEW_APP_SUPERUSER_PASSWORD" 
      --set "backend.djangoEnv.DJANGO_SUPERUSER_EMAIL=$REVIEW_APP_SUPERUSER_EMAIL" 
      --set "frontend.containerPort=8080"
      $CI_ENVIRONMENT_SLUG forge-helm-chart

# Uninstall helm release from given namespace
.k8s-remove: &k8s-remove
  image:
    name: alpine/helm
    entrypoint: [""]
  tags:
    - docker-privileged
  before_script:
    - export KUBECONFIG=${KUBE_CONFIG_FILE}
  script:
    - helm uninstall --namespace "${K8S_NAMESPACE}" "$CI_ENVIRONMENT_SLUG"

# Install pip requirements using cache.
# Requirements only reinstalled if requirements file changes
.pip-requirements: &pip-requirements
  variables:
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  cache:
    paths:
      - .cache/pip
      - venv/
    key:
      files:
        - $REQUIREMENTS_FILE
  before_script:
    - python -V
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - cd backend
    - pip install -r ${REQUIREMENTS_FILE}
  tags:
    - docker

